{"version":3,"sources":["containers/List/ListItem/ListItem.module.scss","containers/List/List.module.scss","logo.svg","containers/List/CreateList/CreateList.module.scss","containers/List/ListItem/ListItem.js","containers/List/List.js","containers/List/CreateList/CreateList.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ListItem","props","useState","content","inputValueState","setInputValueState","inputRef","useRef","useEffect","current","focus","editingItemId","className","classes","id","type","Editing","value","onChange","e","target","editTask","listId","ref","complete","Complete","Incomplete","ButtonGroup","itemBtn","btnEditing","join","onClick","toggleEditing","btnCheck","toggleComplete","btnDelete","delete","List","React","memo","tasksJSX","tasks","map","task","name","key","inputState","setInputState","addItem","clicked","stopPropagation","constantListView","title","btnCtn","removeList","toggleShow","showListId","inputGroup","onKeyDown","event","action","enterKeyDown","placeholder","CreateList","addList","App","listsState","setListsState","editingItemState","setEditingItemState","showListState","setShowListItemState","localStorage","getItem","storedListsJSON","storedLists","JSON","parse","setItem","stringify","addTask","useCallback","taskToAdd","updatedList","filter","list","push","Date","getTime","updatedLists","index","taskToEditId","newName","updatedTasks","deleteTask","taskToDeleteId","item","changeTaskStatus","taskToChangeId","changeTaskEdit","listTitle","changeShownList","listToViewId","listsJSX","undefined","src","logo","alt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ad269efa.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"ListItem\":\"ListItem_ListItem__Lpde1\",\"Complete\":\"ListItem_Complete__1Lacz\",\"Editing\":\"ListItem_Editing__3yqqY\",\"ButtonGroup\":\"ListItem_ButtonGroup__25Ap9\",\"itemBtn\":\"ListItem_itemBtn__yaovG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"List\":\"List_List__3vcMH\",\"constantListView\":\"List_constantListView__2-r7G\",\"inputGroup\":\"List_inputGroup__1xvuD\"};","module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputGroup\":\"CreateList_inputGroup__2cjCI\"};","import React, {useState, useRef, useEffect} from 'react';\r\nimport classes from './ListItem.module.scss';\r\n\r\nconst ListItem = (props) => {\r\n    const [inputValueState, setInputValueState] = useState(props.content);\r\n    const inputRef = useRef();\r\n    useEffect(() => {\r\n        if(inputRef.current){\r\n            inputRef.current.focus();\r\n        }\r\n    }, [props.editingItemId])\r\n    return (\r\n        <li className={classes.ListItem}>\r\n            {props.editingItemId === props.id ?\r\n                <input type=\"text\" \r\n                    className={classes.Editing} \r\n                    value={inputValueState} \r\n                    onChange={(e) => {setInputValueState(e.target.value); props.editTask(props.listId, props.id, e.target.value)}} \r\n                    ref={inputRef}\r\n                />\r\n                : <p className={props.complete ? classes.Complete : classes.Incomplete }>{props.content}</p>\r\n            }\r\n            <div className={classes.ButtonGroup}>\r\n                {/* edit complete delete */}\r\n                <button className={[classes.itemBtn, classes.btnEditing].join('')} onClick={() => {props.toggleEditing(props.id)}}><i className=\"fas fa-edit\"></i></button>\r\n                <button className={[classes.itemBtn, classes.btnCheck].join('')} onClick={() => {props.toggleComplete(props.listId, props.id)}}>{props.complete ? <i className=\"fas fa-times\"></i> : <i className=\"fas fa-check\"></i>}</button>\r\n                <button className={[classes.itemBtn, classes.btnDelete].join('')} onClick={() => {props.delete(props.listId, props.id)}}><i className=\"fas fa-trash\"></i></button>\r\n            </div>\r\n        </li>\r\n    )\r\n}\r\n\r\nexport default ListItem;","import React, {useState} from 'react';\r\nimport ListItem from './ListItem/ListItem';\r\nimport classes from './List.module.scss';\r\n\r\nconst List = React.memo ((props) => {\r\n   \r\n    let tasksJSX =  \r\n        props.tasks.map((task) => {\r\n            return (\r\n                <ListItem content={task.name} complete={task.complete} key={task.id} listId={props.id} id={task.id} delete={props.delete} editingItemId={props.editingItemId} toggleComplete={props.toggleComplete} toggleEditing={props.toggleEditing} editTask={props.editTask} />\r\n            );\r\n        });\r\n    \r\n    const [ inputState, setInputState ] = useState('');\r\n\r\n    const addItem = () => {\r\n        props.clicked(props.id, inputState);\r\n        setInputState('');\r\n    }\r\n\r\n    const enterKeyDown = (event, action) => {\r\n        if(event.key === 'Enter') {\r\n            action();\r\n        }\r\n    }\r\n    \r\n\r\n    return (\r\n        <div className={classes.List} onClick={(e) => e.stopPropagation()}>\r\n            <div className={classes.constantListView}>\r\n                <h2>{props.title}</h2>\r\n                <div className={classes.btnCtn}>\r\n                    <button onClick={() => props.removeList(props.id)} className=\"roundBtn warning\"><i className=\"fas fa-trash\"></i></button>     \r\n                    <button onClick={() => props.toggleShow(props.id)} className=\"roundBtn\">\r\n                        {   props.showListId === props.id ?\r\n                            <i className=\"fas fa-eye-slash\"></i>\r\n                            : <i className=\"fas fa-eye\"></i>\r\n                        }\r\n                    </button> \r\n                </div>\r\n            </div>\r\n            {props.showListId === props.id ?\r\n                <div>\r\n                    <ul>\r\n                        {tasksJSX}\r\n                    </ul>\r\n                    <div className={classes.inputGroup}>\r\n                        <input type=\"text\" value={inputState} onKeyDown={event => enterKeyDown(event, addItem)} onChange={event => setInputState(event.target.value)} placeholder=\"Add task\"/>\r\n                        <button onClick={addItem}><i className=\"fas fa-plus\"></i></button>\r\n                    </div>\r\n                </div>\r\n                : null\r\n            }\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default List;","import React, {useState} from 'react';\r\nimport classes from './CreateList.module.scss';\r\n\r\nconst CreateList = React.memo ((props) => {\r\n    const [ inputState, setInputState ] = useState('');\r\n\r\n    const addList = () => {\r\n        props.clicked(inputState)\r\n        setInputState('');\r\n    }\r\n\r\n    const enterKeyDown = (event, action) => {\r\n        if(event.key === 'Enter') {\r\n            action();\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={classes.inputGroup}>\r\n            <input type=\"text\" value={inputState} onKeyDown={event => enterKeyDown(event, addList)} onChange={(e) => setInputState(e.target.value)} placeholder=\"Add new list name\"/>\r\n            <button onClick={addList}><i className=\"fas fa-plus\"></i></button>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default CreateList;","import React, {useState, useCallback, useEffect} from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport List from './containers/List/List';\r\nimport CreateList from './containers/List/CreateList/CreateList';\r\n\r\nfunction App() {\r\n\tconst [ listsState, setListsState ] = useState([]);\r\n\tconst [ editingItemState, setEditingItemState ] = useState(\"\");\r\n\tconst [ showListState, setShowListItemState ] = useState(\"\");\r\n\t\r\n\tuseEffect(() => {\r\n\t\t// get saved lists from localStorage at app initiation\r\n\t\tif (localStorage.getItem(\"lists\") !== null) {\r\n\t\t\tlet storedListsJSON = localStorage.getItem(\"lists\");\r\n\t\t\tlet storedLists = JSON.parse(storedListsJSON);\r\n\t\t\tsetListsState(storedLists);\r\n\t\t} \r\n\t}, [])\r\n\r\n\tuseEffect(() => {\r\n\t\t// save lists to Local Storage when states changes\r\n\t\tlocalStorage.setItem('lists', JSON.stringify(listsState));\r\n\t}, [listsState])\r\n\r\n\t// TASK HANDLERS\r\n\t// ADD TASK TO LIST\r\n\tconst addTask = useCallback((listId, taskToAdd) => {\r\n\t\tif(taskToAdd !== \"\"){\r\n\t\t\tlet updatedList = listsState.filter(list => {\r\n\t\t\t\treturn list.id === listId;\r\n\t\t\t});\r\n\t\t\tupdatedList[0].tasks.push({\r\n\t\t\t\tid: `${listId}-${new Date().getTime()}`, name: taskToAdd , complete: false\r\n\t\t\t})\r\n\t\t\t\r\n\t\t\tlet updatedLists = listsState.map((list, index) => {\r\n\t\t\t\tif(index !== listId) {\r\n\t\t\t\t\treturn list;\r\n\t\t\t\t}\t\t\r\n\t\t\t\treturn updatedList;   \r\n\t\t\t});\r\n\t\t\t\r\n\t\t\tsetListsState(updatedLists);\t\r\n\t\t}\r\n\t}, [listsState])\r\n\r\n\t// EDIT TASK\r\n\tconst editTask = useCallback((listId, taskToEditId, newName) => {\r\n\t\tlet updatedList = listsState.filter(list => {\r\n\t\t\treturn list.id === listId;\r\n\t\t});\r\n\t\t\r\n\t\tlet updatedTasks = updatedList[0].tasks.map((list, index) => {\r\n\t\t\tif(list.id !== taskToEditId) {\r\n\t\t\t\treturn list;\r\n\t\t\t}\t\r\n\t\t\treturn {\r\n\t\t\t\t...list,\r\n\t\t\t\tname: newName\r\n\t\t\t};    \r\n\t\t});\r\n\t\tupdatedList[0].tasks = updatedTasks;\r\n\t\tlet updatedLists = listsState.map((list, index) => {\r\n\t\t\tif(index !== listId) {\r\n\t\t\t\treturn list;\r\n\t\t\t}\t\t\r\n\t\t\treturn updatedList;    \r\n\t\t});\r\n\t\t\r\n\t\tsetListsState(updatedLists);\t\r\n\t}, [listsState])\r\n\r\n\t// DELETE TASK\r\n\tconst deleteTask = useCallback((listId, taskToDeleteId) => {\r\n\t\tlet updatedList = listsState.filter(list => {\r\n\t\t\treturn list.id === listId;\r\n\t\t});\r\n\t\t\r\n\t\tlet updatedTasks = updatedList[0].tasks.filter( (item, index) => item.id !== taskToDeleteId);\r\n\t\tupdatedList[0].tasks = updatedTasks;\r\n\t\tlet updatedLists = listsState.map((list, index) => {\r\n\t\t\tif(index !== listId) {\r\n\t\t\t\treturn list;\r\n\t\t\t}\t\t\r\n\t\t\treturn updatedList;    \r\n\t\t});\r\n\t\t\r\n\t\tsetListsState(updatedLists);\t\r\n\t}, [listsState]);\r\n\t\r\n\t// CHANGE TASK STATE - COMPLETE OR INCOMPLETE\r\n\tconst changeTaskStatus = useCallback((listId, taskToChangeId) => {\r\n\t\tlet updatedList = listsState.filter(list => {\r\n\t\t\treturn list.id === listId;\r\n\t\t});\r\n\t\t\r\n\t\tlet updatedTasks = updatedList[0].tasks.map((list, index) => {\r\n\t\t\tif(list.id !== taskToChangeId) {\r\n\t\t\t\treturn list;\r\n\t\t\t}\t\r\n\t\t\treturn {\r\n\t\t\t\t...list,\r\n\t\t\t\tcomplete: !list.complete\r\n\t\t\t};    \r\n\t\t});\r\n\t\tupdatedList[0].tasks = updatedTasks;\r\n\t\tlet updatedLists = listsState.map((list, index) => {\r\n\t\t\tif(index !== listId) {\r\n\t\t\t\treturn list;\r\n\t\t\t}\t\t\r\n\t\t\treturn updatedList;\r\n\t\t});\r\n\t\tsetListsState(updatedLists);\t\r\n\t}, [listsState])\r\n\r\n\t// CHANGE TASK STATE - EDITING OR NOT EDITING\r\n\tconst changeTaskEdit = useCallback((taskToEditId) => {\r\n\t\tif (editingItemState === taskToEditId) {\r\n\t\t\tsetEditingItemState(\"\");\r\n\t\t} else {\r\n\t\t\tsetEditingItemState(taskToEditId);\r\n\t\t}\r\n\t}, [editingItemState])\r\n\r\n\t// LISTS HANDLERS\r\n\t// ADD LIST\r\n\tconst addList = useCallback((listTitle) => {\r\n\t\tif(listTitle !== \"\"){\r\n\t\t\tlet updatedLists = [...listsState];\r\n\t\t\tupdatedLists.push(\r\n\t\t\t\t{\r\n\t\t\t\t\tid: new Date().getTime(),\r\n\t\t\t\t\ttitle: listTitle, \r\n\t\t\t\t\ttasks: []\r\n\t\t\t\t},\r\n\t\t\t)\r\n\t\t\tsetListsState(updatedLists);\t\r\n\t\t}\r\n\t}, [listsState])\r\n\r\n\t// DELETE LIST\r\n\tconst removeList = useCallback((listId) => {\r\n\t\tlet updatedLists = listsState.filter( (item) => item.id !== listId);\r\n\t\tsetListsState(updatedLists);\t\r\n\t}, [listsState])\r\n\r\n\t// CHANGE LIST STATE - SHOW OR HIDE\r\n\tconst changeShownList = useCallback((listToViewId) => {\r\n\t\tif (showListState === listToViewId) {\r\n\t\t\tsetShowListItemState(\"\");\r\n\t\t} else {\r\n\t\t\tsetShowListItemState(listToViewId);\r\n\t\t}\r\n\t}, [showListState])\r\n\r\n\tlet listsJSX = listsState !== [] ? listsState.map((list) => {\r\n\t\treturn (\r\n\t\t\t<List \r\n\t\t\t\ttitle={list.title} \r\n\t\t\t\tkey={list.id} \r\n\t\t\t\tid={list.id}\r\n\t\t\t\ttasks={list.tasks} \r\n\t\t\t\tclicked={addTask} \r\n\t\t\t\tdelete={deleteTask} \r\n\t\t\t\tremoveList={removeList} \r\n\t\t\t\ttoggleComplete={changeTaskStatus} \r\n\t\t\t\teditingItemId={editingItemState} \r\n\t\t\t\ttoggleEditing={changeTaskEdit} \r\n\t\t\t\teditTask={editTask}\r\n\t\t\t\tshowListId={showListState}\r\n\t\t\t\ttoggleShow={changeShownList}\r\n\t\t\t/>\r\n\t\t);\r\n\t}) : null;\r\n\t\r\n\treturn (\r\n\t\t<div className=\"App\" onClick={editingItemState ? () => changeTaskEdit(editingItemState) : undefined }>\r\n\t\t\t<header className=\"App-header\">\r\n\t\t\t\t<div className=\"Container\">\r\n\t\t\t\t<img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n\t\t\t\t<h1>To-Do made with React</h1>\r\n\t\t\t\t</div>\r\n\t\t\t</header>\r\n\t\t\t<main>\r\n\t\t\t\t{listsJSX}\r\n\t\t\t\t<CreateList clicked={addList}/>\r\n\t\t\t</main>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}
{"version":3,"sources":["containers/List/ListItem/ListItem.module.scss","containers/List/List.module.scss","logo.svg","containers/List/CreateList/CreateList.module.scss","containers/List/ListItem/ListItem.js","containers/List/List.js","containers/List/CreateList/CreateList.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ListItem","props","useState","content","inputValueState","setInputValueState","inputRef","useRef","useEffect","current","console","log","focus","editingItemId","className","classes","id","type","Editing","value","onChange","e","target","editTask","listId","ref","complete","Complete","Incomplete","ButtonGroup","onClick","toggleEditing","toggleComplete","delete","List","React","memo","tasksJSX","tasks","map","task","name","key","inputState","setInputState","addItem","clicked","title","inputGroup","onKeyDown","event","action","enterKeyDown","placeholder","CreateList","addList","App","listsState","setListsState","editingItemState","setEditingItemState","localStorage","getItem","storedListsJSON","storedLists","JSON","parse","setItem","stringify","addTask","useCallback","taskToAdd","updatedList","filter","list","push","Date","getTime","updatedLists","index","deleteTask","taskToDeleteId","updatedTasks","item","changeTaskState","taskToChangeId","changeTaskEdit","taskToEditId","newName","AddList","listTitle","listsJSX","src","logo","alt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.fda62f0e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"ListItem\":\"ListItem_ListItem__Lpde1\",\"Complete\":\"ListItem_Complete__1Lacz\",\"Editing\":\"ListItem_Editing__3yqqY\",\"ButtonGroup\":\"ListItem_ButtonGroup__25Ap9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"List\":\"List_List__3vcMH\",\"inputGroup\":\"List_inputGroup__1xvuD\"};","module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputGroup\":\"CreateList_inputGroup__2cjCI\"};","import React, {useState, useRef, useEffect} from 'react';\r\nimport classes from './ListItem.module.scss';\r\n\r\nconst ListItem = (props) => {\r\n    const [inputValueState, setInputValueState] = useState(props.content);\r\n    const inputRef = useRef();\r\n    useEffect(() => {\r\n        if(inputRef.current){\r\n            console.log(inputRef.current)\r\n            inputRef.current.focus();\r\n        }\r\n    }, [props.editingItemId])\r\n    return (\r\n        <li className={classes.ListItem}>\r\n            {props.editingItemId === props.id ?\r\n                <input type=\"text\" className={classes.Editing} value={inputValueState} onChange={(e) => {setInputValueState(e.target.value); props.editTask(props.listId, props.id, e.target.value)}} ref={inputRef} />\r\n                : <p className={props.complete === true ? classes.Complete : classes.Incomplete }>{props.content}</p>\r\n            }\r\n            <div className={classes.ButtonGroup}>\r\n                {/* edit complete delete */}\r\n                <button onClick={() => {props.toggleEditing(props.id)}}>e</button>\r\n                <button onClick={() => {props.toggleComplete(props.listId, props.id)}}>c</button>\r\n                <button onClick={() => {props.delete(props.listId, props.id)}}>d</button>\r\n            </div>\r\n        </li>\r\n    )\r\n}\r\n\r\nexport default ListItem;","import React, {useState} from 'react';\r\nimport ListItem from './ListItem/ListItem';\r\nimport classes from './List.module.scss';\r\n\r\nconst List = React.memo ((props) => {\r\n   \r\n    let tasksJSX =  \r\n        props.tasks.map((task) => {\r\n            return (\r\n                <ListItem content={task.name} complete={task.complete} key={task.id} listId={props.id} id={task.id} delete={props.delete} editingItemId={props.editingItemId} toggleComplete={props.toggleComplete} toggleEditing={props.toggleEditing} editTask={props.editTask} />\r\n            );\r\n        });\r\n    \r\n    const [ inputState, setInputState ] = useState('');\r\n\r\n    const addItem = () => {\r\n        props.clicked(props.id, inputState);\r\n        setInputState('');\r\n    }\r\n\r\n    const enterKeyDown = (event, action) => {\r\n        if(event.key === 'Enter') {\r\n            action();\r\n        }\r\n    }\r\n    \r\n\r\n    return (\r\n        // nombre de la Lista\r\n        // items de la Lista\r\n        // agregar elemento a la lista\r\n        <div className={classes.List}>\r\n            <h2>{props.title}</h2>\r\n            <ul>\r\n                {tasksJSX}\r\n            </ul>\r\n            <div className={classes.inputGroup}>\r\n                <input type=\"text\" value={inputState} onKeyDown={event => enterKeyDown(event, addItem)} onChange={event => setInputState(event.target.value)} placeholder=\"Add task\"/>\r\n                <button onClick={addItem}>ADD</button>\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default List;","import React, {useState} from 'react';\r\nimport classes from './CreateList.module.scss';\r\n\r\nconst CreateList = React.memo ((props) => {\r\n    const [ inputState, setInputState ] = useState('');\r\n\r\n    const addList = () => {\r\n        props.clicked(inputState)\r\n        setInputState('');\r\n    }\r\n\r\n    const enterKeyDown = (event, action) => {\r\n        if(event.key === 'Enter') {\r\n            action();\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={classes.inputGroup}>\r\n            <input type=\"text\" value={inputState} onKeyDown={event => enterKeyDown(event, addList)} onChange={(e) => setInputState(e.target.value)} placeholder=\"Add new list name\"/>\r\n            <button onClick={addList}>+</button>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default CreateList;","import React, {useState, useCallback, useEffect} from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport List from './containers/List/List';\r\nimport CreateList from './containers/List/CreateList/CreateList';\r\n\r\n// let lists = [\r\n// \t{\r\n// \t\tid: 2,\r\n// \t\ttitle: \"Cosas por hacer\", \r\n// \t\ttasks: [\r\n// \t\t\t{id: \"2-1600280210238\", name: \"Water plants\", complete: false},\r\n// \t\t\t{id: \"2-1600280210248\", name: \"Clean kitchen\", complete: false},\r\n// \t\t\t{id: \"2-1600280210258\", name: \"Laundry\", complete: false}\r\n// \t\t]\r\n// \t},\r\n// \t{\r\n// \t\tid: 3,\r\n// \t\ttitle: \"Lista de compras\", \r\n// \t\ttasks: [\r\n// \t\t\t{id: \"3-1600280210239\", name: \"Apples\", complete: false},\r\n// \t\t\t{id: \"3-1600280210249\", name: \"Milk\", complete: false}\r\n// \t\t]\r\n// \t},\r\n// ]\r\n\r\nfunction App() {\r\n\tuseEffect(() => {\r\n        console.log('render')\r\n    })\r\n\tconst [ listsState, setListsState ] = useState([]);\r\n\tconst [ editingItemState, setEditingItemState ] = useState(\"\");\r\n\t\r\n\tuseEffect(() => {\r\n\t\t//localStorage.setItem('lists', JSON.stringify(lists));\r\n\t\tif (localStorage.getItem(\"lists\") !== null) {\r\n\t\t\tlet storedListsJSON = localStorage.getItem(\"lists\");\r\n\t\t\tlet storedLists = JSON.parse(storedListsJSON);\r\n\t\t\tsetListsState(storedLists);\r\n\t\t} \r\n\t}, [])\r\n\r\n\t\r\n\tuseEffect(() => {\r\n\t\tlocalStorage.setItem('lists', JSON.stringify(listsState));\r\n\t}, [listsState])\r\n\r\n\tconst addTask = useCallback((listId, taskToAdd) => {\r\n\t\tconsole.log(listId)\r\n\t\tlet updatedList = listsState.filter(list => {\r\n\t\t\treturn list.id === listId;\r\n\t\t});\r\n\t\tupdatedList[0].tasks.push({\r\n\t\t\tid: `${listId}-${new Date().getTime()}`, name: taskToAdd , complete: false\r\n\t\t})\r\n\t\t\r\n\t\tlet updatedLists = listsState.map((list, index) => {\r\n\t\t\tif(index !== listId) {\r\n\t\t\t\treturn list;\r\n\t\t\t}\t\t\r\n\t\t\treturn {\r\n\t\t\t\tupdatedList\r\n\t\t\t};    \r\n\t\t});\r\n\t\t\r\n\t\tsetListsState(updatedLists);\t\r\n\t\tconsole.log(listsState)\t\r\n\t}, [listsState])\r\n\r\n\tconst deleteTask = useCallback((listId, taskToDeleteId) => {\r\n\t\tconsole.log(listId)\r\n\t\tlet updatedList = listsState.filter(list => {\r\n\t\t\treturn list.id === listId;\r\n\t\t});\r\n\t\t\r\n\t\tlet updatedTasks = updatedList[0].tasks.filter( (item, index) => item.id !== taskToDeleteId);\r\n\t\tupdatedList[0].tasks = updatedTasks;\r\n\t\tlet updatedLists = listsState.map((list, index) => {\r\n\t\t\tif(index !== listId) {\r\n\t\t\t\treturn list;\r\n\t\t\t}\t\t\r\n\t\t\treturn {\r\n\t\t\t\tupdatedList\r\n\t\t\t};    \r\n\t\t});\r\n\t\t\r\n\t\tsetListsState(updatedLists);\t\r\n\t\tconsole.log(listsState)\t\r\n\t}, [listsState]);\r\n\t\r\n\r\n\tconst changeTaskState = useCallback((listId, taskToChangeId) => {\r\n\t\tconsole.log(listId)\r\n\t\tlet updatedList = listsState.filter(list => {\r\n\t\t\treturn list.id === listId;\r\n\t\t});\r\n\t\t\r\n\t\tlet updatedTasks = updatedList[0].tasks.map((list, index) => {\r\n\t\t\tif(list.id !== taskToChangeId) {\r\n\t\t\t\treturn list;\r\n\t\t\t\t\r\n\t\t\t}\t\r\n\t\t\tconsole.log(list)\t\r\n\t\t\treturn {\r\n\t\t\t\t...list,\r\n\t\t\t\tcomplete: !list.complete\r\n\t\t\t};    \r\n\t\t});\r\n\t\tconsole.log(updatedTasks)\r\n\t\tupdatedList[0].tasks = updatedTasks;\r\n\t\tlet updatedLists = listsState.map((list, index) => {\r\n\t\t\tif(index !== listId) {\r\n\t\t\t\treturn list;\r\n\t\t\t}\t\t\r\n\t\t\treturn {\r\n\t\t\t\tupdatedList\r\n\t\t\t};    \r\n\t\t});\r\n\t\t\r\n\t\tsetListsState(updatedLists);\t\r\n\t\tconsole.log(listsState)\t\r\n\t}, [listsState])\r\n\r\n\t\r\n\tconst changeTaskEdit = useCallback((taskToEditId) => {\r\n\t\tif (editingItemState === taskToEditId) {\r\n\t\t\tsetEditingItemState(\"\");\r\n\t\t} else {\r\n\t\t\tsetEditingItemState(taskToEditId);\r\n\t\t}\r\n\t}, [editingItemState])\r\n\r\n\tconst editTask = useCallback((listId, taskToEditId, newName) => {\r\n\t\tconsole.log(listId)\r\n\t\tlet updatedList = listsState.filter(list => {\r\n\t\t\treturn list.id === listId;\r\n\t\t});\r\n\t\t\r\n\t\tlet updatedTasks = updatedList[0].tasks.map((list, index) => {\r\n\t\t\tif(list.id !== taskToEditId) {\r\n\t\t\t\treturn list;\r\n\t\t\t\t\r\n\t\t\t}\t\r\n\t\t\tconsole.log(list)\t\r\n\t\t\treturn {\r\n\t\t\t\t...list,\r\n\t\t\t\tname: newName\r\n\t\t\t};    \r\n\t\t});\r\n\t\tconsole.log(updatedTasks)\r\n\t\tupdatedList[0].tasks = updatedTasks;\r\n\t\tlet updatedLists = listsState.map((list, index) => {\r\n\t\t\tif(index !== listId) {\r\n\t\t\t\treturn list;\r\n\t\t\t}\t\t\r\n\t\t\treturn {\r\n\t\t\t\tupdatedList\r\n\t\t\t};    \r\n\t\t});\r\n\t\t\r\n\t\tsetListsState(updatedLists);\t\r\n\t\tconsole.log(listsState)\t\r\n\t}, [listsState])\r\n\r\n\tconst AddList = useCallback((listTitle) => {\r\n\t\tlet updatedLists = [...listsState];\r\n\t\tupdatedLists.push(\r\n\t\t\t{\r\n\t\t\t\tid: new Date().getTime(),\r\n\t\t\t\ttitle: listTitle, \r\n\t\t\t\ttasks: []\r\n\t\t\t},\r\n\t\t)\r\n\t\tsetListsState(updatedLists);\t\r\n\t\tconsole.log(listsState);\r\n\r\n\t}, [listsState])\r\n\r\n\tlet listsJSX = listsState !== [] ? listsState.map((list) => {\r\n\t\t\treturn (\r\n\t\t\t\t<List title={list.title} key={list.id} id={list.id} tasks={list.tasks} clicked={addTask} delete={deleteTask} toggleComplete={changeTaskState} editingItemId={editingItemState} toggleEditing={changeTaskEdit} editTask={editTask}/>\r\n\t\t\t);\r\n\t\t}) : null;\r\n\t\r\n\treturn (\r\n\t\t<div className=\"App\">\r\n\t\t\t<header className=\"App-header\">\r\n\t\t\t\t<div className=\"Container\">\r\n\t\t\t\t<img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n\t\t\t\t<h1>To-Do made with React</h1>\r\n\t\t\t\t</div>\r\n\t\t\t</header>\r\n\t\t\t<main>\r\n\t\t\t\t{/* lista de listas */}\r\n\t\t\t\t{/* lista individual */}\r\n\t\t\t\t{listsJSX}\r\n\t\t\t\t<CreateList clicked={AddList}/>\r\n\t\t\t</main>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}